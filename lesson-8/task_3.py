"""
3)	Создайте собственный класс-исключение, который должен проверять
    содержимое списка на наличие только чисел. Проверить работу
    исключения на реальном примере. Необходимо запрашивать у пользователя
    данные и заполнять список только числами. Класс-исключение должен
    контролировать типы данных элементов списка.

    Примечание: длина списка не фиксирована. Элементы запрашиваются
    бесконечно, пока пользователь сам не остановит работу скрипта, введя,
    например, команду “stop”. При этом скрипт завершается, сформированный
    список с числами выводится на экран.
    Подсказка: для данного задания примем, что пользователь может вводить
    только числа и строки. При вводе пользователем очередного элемента
    необходимо реализовать проверку типа элемента и вносить его в список,
    только если введено число. Класс-исключение должен не позволить
    пользователю ввести текст (не число) и отобразить соответствующее
    сообщение. При этом работа скрипта не должна завершаться.
"""


class CheckType(Exception):
    """Класс исключения для проверки значения числовое или нет"""

    def __init__(self, text):
        """Класс инициализации"""
        self.float = CheckType.try_float(text)

    @staticmethod
    def try_float(text):
        """Попытка преобразовать текст в число"""

        try:
            result = float(text)
        except ValueError:
            result = None

        return result

    def __str__(self):

        return self.float


RESULT_LIST = []

while True:
    VAL = input("Введите число: ")

    if VAL == "stop":
        break

    try:
        raise CheckType(VAL)
    except CheckType as val:
        if val.float is not None:
            RESULT_LIST.append(val.float)

print(RESULT_LIST)
