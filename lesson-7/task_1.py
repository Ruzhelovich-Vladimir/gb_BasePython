"""
1)	Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора
класса (метод __init__()), который должен принимать данные (список списков)
для формирования матрицы. Подсказка: матрица — система некоторых математических
величин, расположенных в виде прямоугольной схемы.
Примеры матриц: 3 на 2, 3 на 3, 2 на 4.
31	22
37	43
51	86

3	5	32
2	4	6
-1	64	-8

3	5	8	3
8	3	7	1

Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в
привычном виде.
Далее реализовать перегрузку метода __add__() для реализации операции сложения
двух объектов класса Matrix (двух матриц). Результатом сложения должна быть
новая матрица.
Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент
первой строки первой матрицы складываем с первым элементом первой строки второй
матрицы и т.д.
"""

"""
Решил немного усложнить задачу:
    * матрица может быть задана в неправильно виде, кол-во столбцов в метрице может быть не равны
    * строки могут быть пустые
    * решал задачу при помощи генератора, т.к. они работают быстрее
    * две матрицы задаются в произвольном ввиде и произвольного размера
    * не стал использовать внешние библиотеке например numpy, хотел проработать свой алгоритм
"""

class Matrix:
    """
    Класс матрицы (Matrix)
    """

    def __init__(self, matrix):
        """
        Генерируем матрицу с числовыми значениями
        :param matrix: список списков
        """
        # Делаем проверку преобразовать значение матрицы в тип float,
        # чтобы исключить ошибку в дальнейшем в противном случае возвращаем исключение
        try:
            self.matrix = [[float(elem) for elem in row] for row in matrix]
        except ValueError:
            print(f"Одно из значение матрицы {matrix} не может быть преобразован в формат числа")
            self.matrix = []

    def __str__(self):
        """
        :return: возвращает матрицу в строковом выражении
        """
        result = "\n".join((' '.join((f"{elem:10}" for elem in row)))
                           for row in self.matrix)
        return result

    def __add__(self, other):
        """
        Сложением двух массивов
        :param other:
        :return:
        """

        # Максимальное кол-во строк в матрицах
        row_len_result = max(len(self.matrix), len(other.matrix))
        # Максимальное кол-во столбцов в матрицах
        col_len_result = max((max(len(row) for row in self.matrix),
                              max(len(row) for row in self.matrix)))

        # Генерируем массив суммы массив c 0 размером row_len_result x col_len_result
        result = [[(self.matrix[row][col]
                    # Значение первого массива, если вышли за пределы, то ноль
                    if row < len(self.matrix) and col < len(self.matrix[row]) else 0)
                   + (other.matrix[row][col]
                      # Значение второго массива, если вышли за пределы, то ноль
                      if row < len(other.matrix) and col < len(other.matrix[row]) else 0)
                   for col in range(col_len_result)]
                  for row in range(row_len_result)]

        return Matrix(result)


MATRIX_1 = Matrix([[1, 1, 1], [1, 1], [1, 1], [1, 1], [1]])
MATRIX_2 = Matrix([[1, 1], [1, 1], [], [1, 1]])

print("MATRIX_1:")
print(MATRIX_1)
print("MATRIX_2:")
print(MATRIX_2)
print("MATRIX_1+MATRIX_2:")
print(MATRIX_1 + MATRIX_2)
